// Generated by CoffeeScript 1.8.0
(function() {
  var Key, KeyRing;

  Key = (function() {
    function Key(config) {
      this.config = config;
    }

    Key.prototype.fromObject = function(obj) {
      this.id = obj.id;
      this.email = obj.email;
      this.publicKeyArmored = obj.publicKeyArmored;
      return this.privateKeyArmored = obj.privateKeyArmored;
    };

    Key.prototype.create = function(id, email, passphrase, bits, onSuccess, onError) {
      var options;
      if (bits == null) {
        bits = this.config.defaultBits;
      }
      options = {
        numBits: bits,
        userId: "" + id + " <" + email + ">",
        passphrase: passphrase
      };
      return openpgp.generateKeyPair(options).then((function(_this) {
        return function(newKey) {
          var _base;
          _this.id = id;
          _this.email = email;
          _this.privateKeyArmored = newKey.privateKeyArmored;
          _this.publicKeyArmored = newKey.publicKeyArmored;
          if (typeof (_base = _this.create)._then === "function" ? _base._then() : void 0) {
            return _this.create._then(key);
          }
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          var _base;
          if (typeof (_base = _this.create)._catch === "function" ? _base._catch() : void 0) {
            _this.create._catch(error);
          }
          throw "Can not create a new key - " + error;
        };
      })(this));
    };

    Key.prototype.title = function() {
      return "" + this.email + "<" + this.email + ">";
    };

    Key.prototype.toJSON = function() {
      return {
        id: this.id,
        email: this.email,
        publicKeyArmored: this.publicKeyArmored,
        privateKeyArmored: this.privateKeyArmored
      };
    };

    return Key;

  })();

  Key.prototype.create.then = function(callback) {
    return Key.prototype.create._then = callback;
  };

  Key.prototype.create["catch"] = function(callback) {
    return Key.prototype.create._catch = callback;
  };

  KeyRing = (function() {
    var keyring;

    keyring = [];

    function KeyRing(config) {
      this.config = config;
      this.load();
    }

    KeyRing.prototype.purge = function() {
      return localStorage.removeItem(this.config.keyringTag);
    };

    KeyRing.prototype.load = function(complete) {
      return localStorage.getItem(this.config.keyringTag, function(json) {
        var e, result;
        result = keyring = [];
        if (json) {
          try {
            result = JSON.parse(json);
          } catch (_error) {
            e = _error;
            throw "Unable to parse the 'keys' storage";
          } finally {
            result = [];
          }
        }
        keyring = result.map(function(obj) {
          var key;
          key = new Key(this.config);
          key.fromObject(obj);
          return key;
        });
        if (typeof complete === "function" ? complete() : void 0) {
          return complete();
        }
      });
    };

    KeyRing.prototype.save = function() {
      var json, result;
      result = keyring.map(function(key) {
        return key.toJSON();
      });
      json = JSON.stringify(result);
      return localStorage.setItem(this.config.keyringTag, json);
    };

    KeyRing.prototype.find = function(email) {
      var key, _i, _len;
      for (_i = 0, _len = keyring.length; _i < _len; _i++) {
        key = keyring[_i];
        if (key.email === email) {
          return key;
        }
      }
    };

    KeyRing.prototype.add = function(key) {
      return keyring.push(key);
    };

    KeyRing.prototype.length = function() {
      return keyring.length;
    };

    KeyRing.prototype.at = function(idx) {
      return keyring[idx];
    };

    return KeyRing;

  })();

  window.Key = Key;

  window.KeyRing = KeyRing;

}).call(this);
