// Generated by CoffeeScript 1.8.0
(function() {
  var ObjectId, app, bodyParser, config, db, express, log4js, logger, mongo, port;

  express = require('express');

  bodyParser = require('body-parser');

  mongo = require('mongoskin');

  config = require('config');

  log4js = require('log4js');

  log4js.configure({
    appenders: config.get('log4js.appenders')
  });

  logger = log4js.getLogger('app');

  logger.setLevel(config.get('log4js.level'));

  db = mongo.db(config.get('mongo.url'));

  db.bind('items');

  ObjectId = mongo.ObjectID;

  app = express();

  app.db = db;

  app.ObjectId = ObjectId;

  app.use(bodyParser.json());

  app.use(function(req, res, next) {
    logger.info("" + req.method + " " + req.path);
    return next();
  });

  app.get('/x/:id', function(req, res) {
    var e, id, objId;
    id = req.params.id;
    objId = null;
    try {
      objId = new ObjectId(id);
    } catch (_error) {
      e = _error;
      return res.sendStatus(404);
    }
    if (req.get('Content-Type') !== "application/json") {
      res.statusCode = 200;
      res.send("Please download and install this Chrome plugin to read this message");
      return;
    }
    return db.items.findOne({
      _id: objId
    }, function(err, result) {
      if (err != null) {
        logger.error("findOne(" + id + ") returned error: " + err);
        return res.sendStatus(500);
      } else if (result != null) {
        res.statusCode = 200;
        return res.json(result);
      } else {
        return res.sendStatus(404);
      }
    });
  });

  app.post('/x', function(req, res) {
    var err400, payload;
    payload = req.body;
    err400 = function(msg) {
      res.statusCode = 400;
      return res.json({
        error: msg
      });
    };
    if (payload == null) {
      return err400("Payload missing");
    }
    if (!((payload.keys != null) || (payload.messages != null))) {
      return err400("Neither keys nor messages defined");
    }
    return db.items.insertOne(payload, function(err, result) {
      if (err != null) {
        logger.error("insertOne (" + payload + ") resulted in error: " + err);
        return res.sendStatus = 500;
      } else {
        res.statusCode = 201;
        return res.json({
          id: result.insertedId
        });
      }
    });
  });

  if (require.main === module) {
    port = config.get('express.port');
    app.listen(port, function() {
      return logger.info("The server is running at port " + port);
    });
  }

  module.exports = app;

}).call(this);
