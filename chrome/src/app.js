// Generated by CoffeeScript 1.8.0
(function() {
  var App, Article, ArticleSwitcher, KeyGenerate, KeyImport, KeyRemove, KeyView, PublicImport, PublicKey, app, config, storage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app = null;

  config = new window.Config();

  storage = new window.Storage(config);

  PublicKey = (function() {
    function PublicKey(key) {
      this.key = key;
    }

    PublicKey.prototype.fingerprint = function() {
      return this.key.primaryKey.fingerprint;
    };

    PublicKey.prototype.save = function() {
      return storage.get('directory', (function(_this) {
        return function(dir) {
          var userId, value, _i, _len, _ref;
          if (dir == null) {
            dir = {};
          }
          _ref = _this.key.getUserIds();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            userId = _ref[_i];
            dir[userId] = _this.fingerprint();
          }
          value = {
            userIds: _this.key.getUserIds(),
            armor: _this.key.armor()
          };
          return storage.set(_this.fingerprint(), value, function() {
            console.log("Saved " + (_this.fingerprint()));
            return console.log(dir);
          });
        };
      })(this));
    };

    return PublicKey;

  })();

  Article = (function() {
    function Article() {
      this.error = null;
      this.note = null;
      this.initialize();
    }

    Article.prototype.filename = null;

    Article.prototype.initialize = function() {};

    Article.prototype.onBind = function() {};

    return Article;

  })();

  KeyGenerate = (function(_super) {
    __extends(KeyGenerate, _super);

    function KeyGenerate() {
      this.submit = __bind(this.submit, this);
      return KeyGenerate.__super__.constructor.apply(this, arguments);
    }

    KeyGenerate.prototype.filename = 'key/generate.html';

    KeyGenerate.prototype.submit = function(e) {
      var options;
      e.preventDefault();
      if (this.passphrase !== this.confirm) {
        this.error = "The passphrase and the passphrase confirmation do not match";
        return;
      }
      this.spinner = true;
      options = {
        numBits: config.defaultBits,
        userId: "" + this.name + " <" + this.email + ">",
        passphrase: this.passphrase
      };
      return openpgp.generateKeyPair(options).then((function(_this) {
        return function(keypair) {
          return storage.set(config.keyName, keypair.publicKeyArmored, function() {
            _this.spinner = false;
            return app["switch"].to('keyView');
          });
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          _this.spinner = false;
          return _this.error = "Can not create a new key - " + error;
        };
      })(this));
    };

    return KeyGenerate;

  })(Article);

  KeyImport = (function(_super) {
    __extends(KeyImport, _super);

    function KeyImport() {
      this.submit = __bind(this.submit, this);
      return KeyImport.__super__.constructor.apply(this, arguments);
    }

    KeyImport.prototype.filename = 'key/import.html';

    KeyImport.prototype.submit = function(e) {
      var key, result, _ref, _ref1;
      e.preventDefault();
      result = openpgp.key.readArmored(this.key);
      if (((_ref = result.err) != null ? _ref.length : void 0) > 0 || ((_ref1 = result.keys) != null ? _ref1.length : void 0) === 0) {
        this.error = "This does not seem to be a valid private key";
        return;
      }
      key = result.keys[0];
      if (!key.isPrivate()) {
        this.error = "This does not seem to be a valid private key";
        return;
      }
      return storage.set(config.keyName, key.armor(), (function(_this) {
        return function() {
          return app["switch"].to('keyView');
        };
      })(this));
    };

    return KeyImport;

  })(Article);

  KeyView = (function(_super) {
    __extends(KeyView, _super);

    function KeyView() {
      this.onBind = __bind(this.onBind, this);
      return KeyView.__super__.constructor.apply(this, arguments);
    }

    KeyView.prototype.filename = 'key/view.html';

    KeyView.prototype.onBind = function() {
      if (app.key) {
        return this.key = app.key;
      }
      return app.readKey((function(_this) {
        return function(key) {
          _this.key = key;
          return _this["public"] = key != null ? key.toPublic() : void 0;
        };
      })(this));
    };

    KeyView.prototype.toGenerate = function() {
      return app["switch"].to('keyGenerate');
    };

    KeyView.prototype.toImport = function() {
      return app["switch"].to('keyImport');
    };

    return KeyView;

  })(Article);

  KeyRemove = (function(_super) {
    __extends(KeyRemove, _super);

    function KeyRemove() {
      return KeyRemove.__super__.constructor.apply(this, arguments);
    }

    KeyRemove.prototype.filename = 'key/remove.html';

    KeyRemove.prototype.doRemove = function() {
      storage.remove(config.keyName);
      app.key = null;
      return app["switch"].to('keyView');
    };

    return KeyRemove;

  })(Article);

  PublicImport = (function(_super) {
    __extends(PublicImport, _super);

    function PublicImport() {
      this.submit = __bind(this.submit, this);
      return PublicImport.__super__.constructor.apply(this, arguments);
    }

    PublicImport.prototype.filename = 'public/import.html';

    PublicImport.prototype.submit = function(e) {
      var key, pub, result, _ref, _ref1;
      e.preventDefault();
      result = openpgp.key.readArmored(this.key);
      if (((_ref = result.err) != null ? _ref.length : void 0) > 0 || ((_ref1 = result.keys) != null ? _ref1.length : void 0) === 0) {
        this.error = "This does not seem to be a valid public key";
        return;
      }
      key = result.keys[0];
      if (!key.isPublic()) {
        this.error = "This does not seem to be a valid public key";
        return;
      }
      pub = new PublicKey(key);
      return pub.save();
    };

    return PublicImport;

  })(Article);

  ArticleSwitcher = (function() {
    function ArticleSwitcher() {
      this.path = "templates";
      this.articles = {
        keyGenerate: new KeyGenerate(),
        keyImport: new KeyImport(),
        keyView: new KeyView(),
        keyRemove: new KeyRemove(),
        publicImport: new PublicImport()
      };
      this.curent = null;
      this.binding = null;
      this.element = $('article');
    }

    ArticleSwitcher.prototype.error = function(message) {
      return this.element.html(message).addClass('warning');
    };

    ArticleSwitcher.prototype.to = function(name) {
      var article, fullpath;
      if (this.binding != null) {
        this.binding.unbind();
      }
      this.current = name;
      article = this.articles[name];
      if (article == null) {
        this.error("Article " + name + " not initialized");
        return;
      }
      fullpath = "" + this.path + "/" + article.filename;
      return this.element.load(fullpath, (function(_this) {
        return function(res, status, xhr) {
          if (status === "error") {
            _this.error("Can not load " + fullpath);
            return;
          }
          _this.binding = rivets.bind(_this.element, article);
          return article.onBind();
        };
      })(this));
    };

    return ArticleSwitcher;

  })();

  App = (function() {
    function App() {
      this.readKey = __bind(this.readKey, this);
      this.template = __bind(this.template, this);
      this.element = (document.getElementsByTagName('body'))[0];
      this.key = null;
      this["switch"] = new ArticleSwitcher();
      this["switch"].to('keyView');
    }

    App.prototype.template = function(e) {
      e.preventDefault();
      return this["switch"].to(e.target.rel);
    };

    App.prototype.readKey = function(callback) {
      return storage.get(config.keyName, (function(_this) {
        return function(key) {
          if (key == null) {
            return callback();
          }
          _this.key = (openpgp.key.readArmored(key)).keys[0];
          window.key = _this.key;
          return callback(_this.key);
        };
      })(this));
    };

    return App;

  })();

  window.onload = function() {
    app = window.app = new App();
    return rivets.bind(app.element, app);
  };

}).call(this);
