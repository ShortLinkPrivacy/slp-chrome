// Generated by CoffeeScript 1.8.0
(function() {
  var ajaxPost, apiUrl, decryptLinks, el, elements, encryptText, loadOpenPgp, openpgp, pageContainsCode, serviceCall, triggerRe, _i, _len;

  openpgp = null;

  triggerRe = /localhost\/x\/(.+)$/gi;

  apiUrl = "http://localhost:5000";

  ajaxPost = function(url, payload, success) {
    var xmlhttp;
    xmlhttp = new XMLHttpRequest();
    xmlhttp.open('POST', url, true);
    xmlhttp.onreadystatechange = function() {
      var response, _ref;
      if (xmlhttp.readyState === 4) {
        response = JSON.parse(xmlhttp.responseText);
        if ((200 <= (_ref = xmlhttp.status) && _ref <= 299)) {
          return success(response);
        } else {
          return console.log(response);
        }
      }
    };
    xmlhttp.setRequestHeader('Content-Type', 'application/json');
    return xmlhttp.send(JSON.stringify(payload));
  };

  loadOpenPgp = function(callback) {
    if (!openpgp) {
      return chrome.runtime.sendMessage({
        loadOpenPgp: true
      }, (function(_this) {
        return function(response) {
          console.log('openpgp loaded');
          openpgp = window.openpgp;
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback() : void 0;
    }
  };

  encryptText = function() {
    return console.log("here");
  };

  decryptLinks = function(node) {
    var id, match, _results;
    match = triggerRe.exec(node.nodeValue);
    _results = [];
    while (match != null) {
      id = match[1];
      console.log("Found: " + id);
      $.get("" + apiUrl + "/x/" + id, function(res) {
        window.node = node;
        return node.nodeValue = res.fingerprint;
      });
      _results.push(match = triggerRe.exec(node.nodeValue));
    }
    return _results;
  };

  pageContainsCode = function() {
    var node, walk;
    walk = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT);
    while (node = walk.nextNode()) {
      if (triggerRe.exec(node.nodeValue)) {
        return true;
      }
    }
    return false;
  };

  serviceCall = function(payload, opt) {};

  elements = document.getElementsByTagName('textarea');

  for (_i = 0, _len = elements.length; _i < _len; _i++) {
    el = elements[_i];
    el.addEventListener('mousedown', function(event) {
      var message;
      message = el.value;
      if (!(event.which === 3 && message)) {
        return;
      }
      return loadOpenPgp(function() {
        return chrome.storage.local.get('privateKey', function(val) {
          var privateKey, privateKeyArmored, publicKey;
          privateKeyArmored = val.privateKey;
          if (privateKeyArmored == null) {

          } else {
            privateKey = openpgp.key.readArmored(privateKeyArmored).keys[0];
            publicKey = privateKey.toPublic();
            return openpgp.encryptMessage(publicKey, message).then(function(encryptedMessage) {
              var fingeredHash;
              fingeredHash = {};
              fingeredHash[publicKey.primaryKey.fingerprint] = encryptedMessage;
              return ajaxPost("" + apiUrl + "/x", {
                messages: fingeredHash
              }, function(result) {
                if (result.id != null) {
                  el.value = "" + apiUrl + "/x/" + result.id;
                  return el.dispatchEvent(new Event('input'));
                } else {
                  return console.log("error");
                }
              });
            })["catch"](function(error) {});
          }
        });
      });
    });
  }

}).call(this);
