// Generated by CoffeeScript 1.8.0
(function() {
  var apiUrl, decryptLinks, loadModules, openpgp, pageContainsCode, triggerRe;

  openpgp = null;

  triggerRe = /localhost\/x\/(.+)$/gi;

  apiUrl = "http://localhost:5000";

  loadModules = function(callback) {
    if (openpgp == null) {
      return chrome.runtime.sendMessage({
        loadModules: true
      }, (function(_this) {
        return function(response) {
          console.log('openpgp loaded');
          openpgp = window.openpgp;
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    }
  };

  decryptLinks = function(node) {
    var id, match, _results;
    match = triggerRe.exec(node.nodeValue);
    _results = [];
    while (match != null) {
      id = match[1];
      console.log("Found: " + id);
      $.get("" + apiUrl + "/x/" + id, function(res) {
        window.node = node;
        return node.nodeValue = res.fingerprint;
      });
      _results.push(match = triggerRe.exec(node.nodeValue));
    }
    return _results;
  };

  pageContainsCode = function() {
    var node, walk;
    walk = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT);
    while (node = walk.nextNode()) {
      if (triggerRe.exec(node.nodeValue)) {
        return true;
      }
    }
    return false;
  };

  if (pageContainsCode()) {
    loadModules((function(_this) {
      return function() {
        var node, walk, _results;
        walk = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT);
        _results = [];
        while (node = walk.nextNode()) {
          _results.push(decryptLinks(node));
        }
        return _results;
      };
    })(this));
  }

}).call(this);
